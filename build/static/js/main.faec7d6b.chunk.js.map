{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","search","bind","handleTermChange","this","onSearch","state","term","event","setState","target","value","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.faec7d6b.chunk.js","sourcesContent":["const clientId = '1ea52d62286548ffadc2e5b513df2800';\nconst redirectUri = 'http://phranisjammming.surge.sh';\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } // check user token\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      // clears parameters to allow us to grab new access token when\n      // it expires\n      window.setTimeout(() => (accessToken = ''), expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    })\n      .then((response) => {\n        return response.json();\n      })\n      .then((jsonResponse) => {\n        if (!jsonResponse.tracks) {\n          return [];\n        }\n        return jsonResponse.tracks.items.map((track) => ({\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri,\n        }));\n      });\n  },\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = { Authorization: `Bearer ${accessToken}` };\n    let userId;\n    return fetch('https://api.spotify.com/v1/me', { headers: headers })\n      .then((response) => response.json())\n      .then((jsonResponse) => {\n        userId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({ name: name }),\n        })\n          .then((response) => response.json())\n          .then((jsonResponse) => {\n            const playlistId = jsonResponse.id;\n            return fetch(\n              `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`,\n              {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({ uris: trackUris }),\n              }\n            );\n          });\n      });\n  },\n};\nexport default Spotify;\n","import React from 'react';\nimport './SearchBar.css';\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.search = this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n  }\n  search() {\n    this.props.onSearch(this.state.term);\n  }\n  handleTermChange(event) {\n    this.setState({\n      term: event.target.value,\n    });\n  }\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <input\n          onChange={this.handleTermChange}\n          placeholder=\"Enter A Song, Album, or Artist\"\n        />\n        <button onClick={this.search} className=\"SearchButton\">\n          SEARCH\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n  constructor(props) {\n    super(props);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n  }\n  renderAction() {\n    if (this.props.isRemoval) {\n      return (\n        <button onClick={this.removeTrack} className=\"Track-action\">\n          -\n        </button>\n      );\n    } else {\n      return (\n        <button onClick={this.addTrack} className=\"Track-action\">\n          +\n        </button>\n      );\n    }\n  }\n  addTrack() {\n    this.props.onAdd(this.props.track);\n  }\n  removeTrack() {\n    this.props.onRemove(this.props.track);\n  }\n  render() {\n    return (\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3> {this.props.track.name}</h3>\n          <p>\n            {' '}\n            {this.props.track.artist} | {this.props.track.album}{' '}\n          </p>\n        </div>\n        {this.renderAction()}\n      </div>\n    );\n  }\n}\n\nexport default Track;\n","import React from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track.js';\n\nclass TrackList extends React.Component {\n  render() {\n    return (\n      <div className=\"TrackList\">\n        {this.props.tracks.map((track) => (\n          <Track\n            key={track.id}\n            track={track}\n            onAdd={this.props.onAdd}\n            onRemove={this.props.onRemove}\n            isRemoval={this.props.isRemoval}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default TrackList;\n","import React from 'react';\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList.js';\n\nclass SearchResults extends React.Component {\n  render() {\n    return (\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList\n          onAdd={this.props.onAdd}\n          isRemoval={false}\n          tracks={this.props.searchResults}\n        />\n      </div>\n    );\n  }\n}\n\nexport default SearchResults;\n","import React from 'react';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList.js';\n\nclass Playlist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n  handleNameChange(event) {\n    this.props.onNameChange(event.target.value);\n  }\n  render() {\n    return (\n      <div className=\"Playlist\">\n        <input defaultValue={'New Playlist'} onChange={this.handleNameChange} />\n        <TrackList\n          tracks={this.props.playlistTracks}\n          onRemove={this.props.onRemove}\n          isRemoval={true}\n        />\n        <button onClick={this.props.onSave} className=\"Playlist-save\">\n          SAVE TO SPOTIFY\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Playlist;\n","// import logo from './logo.svg';\nimport React from 'react';\nimport SearchBar from '../SearchBar/SearchBar.js';\nimport SearchResults from '../SearchResults/SearchResults.js';\nimport Playlist from '../Playlist/Playlist.js';\nimport Spotify from '../../util/Spotify.js';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: 'New Playlist',\n      playlistTracks: [],\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find((savedTrack) => savedTrack.id === track.id)) {\n      return;\n    }\n    tracks.push(track);\n    this.setState({ playlistTracks: tracks });\n  }\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter((currentTrack) => currentTrack.id !== track.id);\n    this.setState({ playlistTracks: tracks });\n  }\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name });\n  }\n  savePlaylist() {\n    // alert('this works');\n    const trackUris = this.state.playlistTracks.map((track) => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({ playlistName: 'New Playlist', playlistTracks: [] });\n    });\n  }\n  search(term) {\n    Spotify.search(term).then((searchResults) => {\n      this.setState({ searchResults: searchResults });\n    });\n  }\n  render() {\n    return (\n      <div>\n        <h1 className=\"\">\n          Ja<span className=\"highlight\">mmm</span>ing\n        </h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults\n              searchResults={this.state.searchResults}\n              onAdd={this.addTrack}\n            />\n            <Playlist\n              playlistName={this.state.playlistName}\n              playlistTracks={this.state.playlistTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Components/App/App.css';\nimport App from './Components/App/App.js';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}